import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { Box, Page, Text ,Button} from "zmp-ui";
import { QRCodeSVG } from "qrcode.react";
import emailjs from "@emailjs/browser";

function Chuyenkhoan() {
  const navigate = useNavigate();
  const location = useLocation();

  const { contactInfo, totalAmount } = location.state || {};
  const [isQRCodeScanned, setIsQRCodeScanned] = useState(false);
  const [countdown, setCountdown] = useState(600); // 10 ph√∫t
  const [orderId, setOrderId] = useState("");
  const [orderTime, setOrderTime] = useState("");
  const [redirectCountdown, setRedirectCountdown] = useState(null);
  const [showCancelDialog, setShowCancelDialog] = useState(false);

  // T·∫°o m√£ ƒë∆°n h√†ng v√† th·ªùi gian 1 l·∫ßn khi load component
  useEffect(() => {
    setOrderId(`DH${Math.floor(Math.random() * 1000000)}`);
    setOrderTime(new Date().toLocaleString());
  }, []);

  // C·∫≠p nh·∫≠t ƒë·∫øm ng∆∞·ª£c m·ªói gi√¢y
  useEffect(() => {
    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // G·ª≠i email x√°c nh·∫≠n
  const sendEmail = () => {
    if (!contactInfo || !contactInfo.email) {
      alert("Kh√¥ng c√≥ th√¥ng tin email ƒë·ªÉ g·ª≠i th√¥ng b√°o!");
      return;
    }

    const templateParams = {
      user_email: contactInfo.email,
      user_name: `${contactInfo.ho} ${contactInfo.ten}`,
      order_id: orderId,
      order_time: orderTime,
      total_price: totalAmount || 0,
    };

    emailjs
      .send(
        "service_hmmkp9i",
        "template_tbf4seq",
        templateParams,
        "85mNtAo5i--k39EHo"
      )
      .then(() => {
        alert("Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
      })
      .catch((error) => {
        console.error("L·ªói khi g·ª≠i email:", error);
        alert("Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.");
      });
  };

   // L∆∞u th√¥ng tin ƒë∆°n h√†ng v√†o l·ªãch s·ª≠
   const saveOrderToHistory = (status) => {
    const orderData = {
      orderId,
      orderTime,
      totalPrice: totalAmount,
      status,
      contactInfo,
      eventName: location.state?.eventName || "Kh√¥ng r√µ", // L·∫•y t√™n s·ª± ki·ªán t·ª´ location.state
    };

    // L∆∞u th√¥ng tin v√†o localStorage (gi·∫£ l·∫≠p l∆∞u v√†o l·ªãch s·ª≠)
    console.log("D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u v√†o l·ªãch s·ª≠:", orderData);
    const history = JSON.parse(localStorage.getItem("orderHistory")) || [];
    history.push(orderData);
    localStorage.setItem("orderHistory", JSON.stringify(history));
  };

  // G·ª≠i email v√† quay v·ªÅ sau 5s
  useEffect(() => {
    if (isQRCodeScanned) {
      sendEmail();
      saveOrderToHistory("ƒê√£ thanh to√°n");
      setRedirectCountdown(5); // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c 5s
    }
  }, [isQRCodeScanned]);

  useEffect(() => {
    if (redirectCountdown === null) return;
  
    if (redirectCountdown === 0) {
      navigate("/home");
      return;
    }
  
    const timer = setTimeout(() => {
      setRedirectCountdown((prev) => prev - 1);
    }, 1000);
  
    return () => clearTimeout(timer);
  }, [redirectCountdown, navigate]);
  

  // ƒê·ªãnh d·∫°ng th·ªùi gian mm:ss
  const formatTime = (seconds) => {
    const m = Math.floor(seconds / 60).toString().padStart(2, "0");
    const s = (seconds % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <Page className="relative min-h-screen bg-[#F4F5F6]">
      <Box className="mt-[56px] px-4 pb-32">
        <Box className="bg-white rounded-xl p-4 mb-4 flex flex-col lg:flex-row gap-6 shadow-md">
          {/* C·ªôt th√¥ng tin ƒë∆°n h√†ng */}
          <Box className="w-full lg:w-1/2 border border-gray-200 rounded-lg p-4 shadow-sm">
            <Text className="font-semibold text-xl mb-4 border-b pb-2">Th√¥ng tin ƒë∆°n h√†ng</Text>
            <Box className="text-gray-700 space-y-2">
              <Text>üè∑Ô∏è Nh√† cung c·∫•p: <strong>GDOUBLEH</strong></Text>
              <Text>üßæ M√£ ƒë∆°n h√†ng: <strong>{orderId}</strong></Text>
              <Text>üïí Th·ªùi gian: <strong>{orderTime}</strong></Text>
              <Text>üìù N·ªôi dung: <strong>GDOUBLEH_Thanh toan don hang</strong></Text>
              <Text>üí∞ S·ªë ti·ªÅn: <strong className="text-green-600">{totalAmount || 0} ƒë</strong></Text>
            </Box>
          </Box>

          {/* C·ªôt QR code */}
          <Box className="w-full lg:w-1/2 flex flex-col items-center justify-center">
            <Text className="font-semibold text-xl mb-4 border-b pb-2 text-[#EF0228]">Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</Text>
            <QRCodeSVG
              value={`payment-confirmation?email=${contactInfo?.email}`}
              size={200}
              bgColor="#ffffff"
              fgColor="#000000"
              level="Q"
              includeMargin={true}
            />
            <Text className="mt-4 text-red-500 font-semibold">
              M√£ QR h·∫øt h·∫°n sau: {formatTime(countdown)}
            </Text>
          </Box>
        </Box>

        {/* C√°c n√∫t b√™n d∆∞·ªõi */}
        {!isQRCodeScanned && (
          <Box className="flex flex-col lg:flex-row justify-between items-center gap-4 mt-6">
            <button
              className="w-full bg-green-500 text-white text-lg font-semibold rounded-full py-3"
              onClick={() => setIsQRCodeScanned(true)}
            >
              Nh·∫•n ƒë·ªÉ qu√©t m√£ QR
            </button>
            <a
              className="text-[#FD0003] text-lg font-semibold cursor-pointer py-3"
              onClick={() => setShowCancelDialog(true)}
            >
              H·ªßy ƒë∆°n h√†ng
            </a>
          </Box>
        )}

        {isQRCodeScanned && (
          <>
            <Text className="text-center text-green-600 font-medium mt-4">
              üéâ ƒê√£ qu√©t m√£ QR th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß...
            </Text>
            {redirectCountdown !== null && (
              <Text className="text-center text-gray-500 text-sm mt-2">
                ‚è≥ Chuy·ªÉn h∆∞·ªõng sau {redirectCountdown} gi√¢y...
              </Text>
            )}
          </>
        )}

        {/* Dialog h·ªßy ƒë∆°n h√†ng */}
        {showCancelDialog && (
          <Box className="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-center z-50">
            <Box className="bg-white rounded-lg p-6 w-[90%] max-w-md">
              <Text className="text-lg font-semibold mb-4">
                B·∫°n c√≥ mu·ªën h·ªßy ƒë∆°n h√†ng kh√¥ng?
              </Text>
              <Box className="flex justify-end space-x-4">
                <Button
                  className="bg-gray-300 text-black px-4 py-2 rounded"
                  onClick={() => setShowCancelDialog(false)}
                >
                  Kh√¥ng
                </Button>
                <Button
                  className="bg-red-500 text-white px-4 py-2 rounded"
                  onClick={() => {
                    saveOrderToHistory("ƒê√£ h·ªßy");
                    setShowCancelDialog(false);
                    navigate("/home");
                  }}
                >
                  C√≥
                </Button>
              </Box>
            </Box>
          </Box>
        )}
      </Box>
    </Page>
  );
}

export default Chuyenkhoan;
